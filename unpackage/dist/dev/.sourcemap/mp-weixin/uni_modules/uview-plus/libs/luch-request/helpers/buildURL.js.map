{"version":3,"file":"buildURL.js","sources":["uni_modules/uview-plus/libs/luch-request/helpers/buildURL.js"],"sourcesContent":["'use strict'\r\n\r\nimport * as utils from '../utils'\r\n\r\nfunction encode(val) {\r\n    return encodeURIComponent(val)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/g, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%20/g, '+')\r\n        .replace(/%5B/gi, '[')\r\n        .replace(/%5D/gi, ']')\r\n}\r\n\r\n/**\r\n * Build a URL by appending params to the end\r\n *\r\n * @param {string} url The base of the url (e.g., http://www.google.com)\r\n * @param {object} [params] The params to be appended\r\n * @returns {string} The formatted url\r\n */\r\nexport default function buildURL(url, params) {\r\n    /* eslint no-param-reassign:0 */\r\n    if (!params) {\r\n        return url\r\n    }\r\n\r\n    let serializedParams\r\n    if (utils.isURLSearchParams(params)) {\r\n        serializedParams = params.toString()\r\n    } else {\r\n        const parts = []\r\n\r\n        utils.forEach(params, (val, key) => {\r\n            if (val === null || typeof val === 'undefined') {\r\n                return\r\n            }\r\n\r\n            if (utils.isArray(val)) {\r\n                key = `${key}[]`\r\n            } else {\r\n                val = [val]\r\n            }\r\n\r\n            utils.forEach(val, (v) => {\r\n                if (utils.isDate(v)) {\r\n                    v = v.toISOString()\r\n                } else if (utils.isObject(v)) {\r\n                    v = JSON.stringify(v)\r\n                }\r\n                parts.push(`${encode(key)}=${encode(v)}`)\r\n            })\r\n        })\r\n\r\n        serializedParams = parts.join('&')\r\n    }\r\n\r\n    if (serializedParams) {\r\n        const hashmarkIndex = url.indexOf('#')\r\n        if (hashmarkIndex !== -1) {\r\n            url = url.slice(0, hashmarkIndex)\r\n        }\r\n\r\n        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams\r\n    }\r\n\r\n    return url\r\n}\r\n"],"names":["encode","val","buildURL","url","params","serializedParams","utils.isURLSearchParams","parts","utils.forEach","key","utils.isArray","v","utils.isDate","utils.isObject","hashmarkIndex"],"mappings":"4CAIA,SAASA,EAAOC,EAAK,CACjB,OAAO,mBAAmBA,CAAG,EACxB,QAAQ,QAAS,GAAG,EACpB,QAAQ,QAAS,GAAG,EACpB,QAAQ,OAAQ,GAAG,EACnB,QAAQ,QAAS,GAAG,EACpB,QAAQ,OAAQ,GAAG,EACnB,QAAQ,QAAS,GAAG,EACpB,QAAQ,QAAS,GAAG,CAC7B,CASe,SAASC,EAASC,EAAKC,EAAQ,CAE1C,GAAI,CAACA,EACD,OAAOD,EAGX,IAAIE,EACJ,GAAIC,EAAAA,kBAAwBF,CAAM,EAC9BC,EAAmBD,EAAO,SAAU,MACjC,CACH,MAAMG,EAAQ,CAAE,EAEhBC,EAAAA,QAAcJ,EAAQ,CAACH,EAAKQ,IAAQ,CAC5BR,IAAQ,MAAQ,OAAOA,EAAQ,MAI/BS,EAAAA,QAAcT,CAAG,EACjBQ,EAAM,GAAGA,CAAG,KAEZR,EAAM,CAACA,CAAG,EAGdO,UAAcP,EAAMU,GAAM,CAClBC,EAAAA,OAAaD,CAAC,EACdA,EAAIA,EAAE,YAAa,EACZE,EAAAA,SAAeF,CAAC,IACvBA,EAAI,KAAK,UAAUA,CAAC,GAExBJ,EAAM,KAAK,GAAGP,EAAOS,CAAG,CAAC,IAAIT,EAAOW,CAAC,CAAC,EAAE,CACxD,CAAa,EACb,CAAS,EAEDN,EAAmBE,EAAM,KAAK,GAAG,CACpC,CAED,GAAIF,EAAkB,CAClB,MAAMS,EAAgBX,EAAI,QAAQ,GAAG,EACjCW,IAAkB,KAClBX,EAAMA,EAAI,MAAM,EAAGW,CAAa,GAGpCX,IAAQA,EAAI,QAAQ,GAAG,IAAM,GAAK,IAAM,KAAOE,CAClD,CAED,OAAOF,CACX"}