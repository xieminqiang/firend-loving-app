{"version":3,"file":"InterceptorManager.js","sources":["uni_modules/uview-plus/libs/luch-request/core/InterceptorManager.js"],"sourcesContent":["'use strict'\r\n\r\nfunction InterceptorManager() {\r\n    this.handlers = []\r\n}\r\n\r\n/**\r\n * Add a new interceptor to the stack\r\n *\r\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\r\n * @param {Function} rejected The function to handle `reject` for a `Promise`\r\n *\r\n * @return {Number} An ID used to remove interceptor later\r\n */\r\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\r\n    this.handlers.push({\r\n        fulfilled,\r\n        rejected\r\n    })\r\n    return this.handlers.length - 1\r\n}\r\n\r\n/**\r\n * Remove an interceptor from the stack\r\n *\r\n * @param {Number} id The ID that was returned by `use`\r\n */\r\nInterceptorManager.prototype.eject = function eject(id) {\r\n    if (this.handlers[id]) {\r\n        this.handlers[id] = null\r\n    }\r\n}\r\n\r\n/**\r\n * Iterate over all the registered interceptors\r\n *\r\n * This method is particularly useful for skipping over any\r\n * interceptors that may have become `null` calling `eject`.\r\n *\r\n * @param {Function} fn The function to call for each interceptor\r\n */\r\nInterceptorManager.prototype.forEach = function forEach(fn) {\r\n    this.handlers.forEach((h) => {\r\n        if (h !== null) {\r\n            fn(h)\r\n        }\r\n    })\r\n}\r\n\r\nexport default InterceptorManager\r\n"],"names":["InterceptorManager","fulfilled","rejected","id","fn","h"],"mappings":"aAEA,SAASA,GAAqB,CAC1B,KAAK,SAAW,CAAE,CACtB,CAUAA,EAAmB,UAAU,IAAM,SAAaC,EAAWC,EAAU,CACjE,YAAK,SAAS,KAAK,CACf,UAAAD,EACA,SAAAC,CACR,CAAK,EACM,KAAK,SAAS,OAAS,CAClC,EAOAF,EAAmB,UAAU,MAAQ,SAAeG,EAAI,CAChD,KAAK,SAASA,CAAE,IAChB,KAAK,SAASA,CAAE,EAAI,KAE5B,EAUAH,EAAmB,UAAU,QAAU,SAAiBI,EAAI,CACxD,KAAK,SAAS,QAASC,GAAM,CACrBA,IAAM,MACND,EAAGC,CAAC,CAEhB,CAAK,CACL"}