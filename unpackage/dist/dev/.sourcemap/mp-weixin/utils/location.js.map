{"version":3,"file":"location.js","sources":["utils/location.js"],"sourcesContent":["/**\n * 位置工具类\n * 提供跨平台的逆地理编码功能\n */\n\n\n\n/**\n * 根据经纬度获取详细地址\n * @param {number} latitude - 纬度\n * @param {number} longitude - 经度\n * @returns {Promise<string>} 详细地址\n */\nexport function getAddressFromLocation(latitude, longitude) {\n  return new Promise((resolve, reject) => {\n    if (!latitude || !longitude) {\n      reject(new Error('经纬度参数不能为空'))\n      return\n    }\n\n    console.log('使用腾讯地图API获取地址:', latitude, longitude)\n    \n    // 直接使用uni.request调用腾讯地图API\n    uni.request({\n      url: 'https://apis.map.qq.com/ws/geocoder/v1/',\n      method: 'GET',\n      data: {\n        key: '4Z3BZ-4JXCJ-EFNFY-DIL4V-6KKKH-YHF6Z',\n        location: `${latitude},${longitude}`,\n        output: 'json'\n      },\n      success: (res) => {\n        console.log('腾讯地图API响应:', res)\n        if (res.statusCode === 200 && res.data && res.data.status === 0 && res.data.result && res.data.result.address) {\n          resolve(res.data.result.address)\n        } else {\n          // 如果获取详细地址失败，返回经纬度信息\n          resolve(`${latitude.toFixed(6)}, ${longitude.toFixed(6)}`)\n        }\n      },\n      fail: (err) => {\n        console.error('腾讯地图API调用失败:', err)\n        // 返回经纬度信息作为备选\n        resolve(`${latitude.toFixed(6)}, ${longitude.toFixed(6)}`)\n      }\n    })\n  })\n}\n\n/**\n * 获取当前位置的详细地址\n * @returns {Promise<Object>} 包含经纬度和地址的对象\n */\nexport function getCurrentLocationAddress() {\n  return new Promise((resolve, reject) => {\n    uni.getLocation({\n      type: 'gcj02',\n      success: (res) => {\n        console.log('获取位置成功:', res)\n        const { latitude, longitude } = res\n        \n        // 使用腾讯地图API获取详细地址\n        getAddressFromLocation(latitude, longitude)\n          .then(address => {\n            resolve({\n              latitude,\n              longitude,\n              address\n            })\n          })\n          .catch(err => {\n            console.error('获取地址失败:', err)\n            // 即使获取地址失败，也返回位置信息\n            resolve({\n              latitude,\n              longitude,\n              address: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n            })\n          })\n      },\n      fail: (err) => {\n        console.error('获取位置失败:', err)\n        reject(new Error('获取位置失败: ' + (err.errMsg || err.message || '未知错误')))\n      }\n    })\n  })\n}\n\n/**\n * 计算两点之间的距离（米）\n * @param {number} lat1 - 第一个点的纬度\n * @param {number} lng1 - 第一个点的经度\n * @param {number} lat2 - 第二个点的纬度\n * @param {number} lng2 - 第二个点的经度\n * @returns {number} 距离（米）\n */\nexport const calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371000 // 地球半径（米）\n  const dLat = (lat2 - lat1) * Math.PI / 180\n  const dLng = (lng2 - lng1) * Math.PI / 180\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng / 2) * Math.sin(dLng / 2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n  return R * c\n}\n\n/**\n * 格式化距离显示\n * @param {number} distance - 距离（米）\n * @returns {string} 格式化后的距离\n */\nexport const formatDistance = (distance) => {\n  if (distance < 1000) {\n    return `${Math.round(distance)}米`\n  } else {\n    return `${(distance / 1000).toFixed(1)}公里`\n  }\n} "],"names":["uni"],"mappings":";;AAaO,SAAS,uBAAuB,UAAU,WAAW;AAC1D,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,CAAC,YAAY,CAAC,WAAW;AAC3B,aAAO,IAAI,MAAM,WAAW,CAAC;AAC7B;AAAA,IACD;AAEDA,gEAAY,kBAAkB,UAAU,SAAS;AAGjDA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,QACJ,KAAK;AAAA,QACL,UAAU,GAAG,QAAQ,IAAI,SAAS;AAAA,QAClC,QAAQ;AAAA,MACT;AAAA,MACD,SAAS,CAAC,QAAQ;AAChBA,sBAAAA,MAAA,MAAA,OAAA,2BAAY,cAAc,GAAG;AAC7B,YAAI,IAAI,eAAe,OAAO,IAAI,QAAQ,IAAI,KAAK,WAAW,KAAK,IAAI,KAAK,UAAU,IAAI,KAAK,OAAO,SAAS;AAC7G,kBAAQ,IAAI,KAAK,OAAO,OAAO;AAAA,QACzC,OAAe;AAEL,kBAAQ,GAAG,SAAS,QAAQ,CAAC,CAAC,KAAK,UAAU,QAAQ,CAAC,CAAC,EAAE;AAAA,QAC1D;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AACbA,sBAAAA,MAAc,MAAA,SAAA,2BAAA,gBAAgB,GAAG;AAEjC,gBAAQ,GAAG,SAAS,QAAQ,CAAC,CAAC,KAAK,UAAU,QAAQ,CAAC,CAAC,EAAE;AAAA,MAC1D;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AAMO,SAAS,4BAA4B;AAC1C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,YAAY;AAAA,MACd,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChBA,sBAAAA,MAAY,MAAA,OAAA,2BAAA,WAAW,GAAG;AAC1B,cAAM,EAAE,UAAU,UAAS,IAAK;AAGhC,+BAAuB,UAAU,SAAS,EACvC,KAAK,aAAW;AACf,kBAAQ;AAAA,YACN;AAAA,YACA;AAAA,YACA;AAAA,UACd,CAAa;AAAA,QACb,CAAW,EACA,MAAM,SAAO;AACZA,wBAAAA,MAAc,MAAA,SAAA,2BAAA,WAAW,GAAG;AAE5B,kBAAQ;AAAA,YACN;AAAA,YACA;AAAA,YACA,SAAS,GAAG,SAAS,QAAQ,CAAC,CAAC,KAAK,UAAU,QAAQ,CAAC,CAAC;AAAA,UACtE,CAAa;AAAA,QACb,CAAW;AAAA,MACJ;AAAA,MACD,MAAM,CAAC,QAAQ;AACbA,sBAAAA,MAAc,MAAA,SAAA,2BAAA,WAAW,GAAG;AAC5B,eAAO,IAAI,MAAM,cAAc,IAAI,UAAU,IAAI,WAAW,OAAO,CAAC;AAAA,MACrE;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;;"}