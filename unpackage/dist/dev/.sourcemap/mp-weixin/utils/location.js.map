{"version":3,"file":"location.js","sources":["utils/location.js"],"sourcesContent":["/**\n * 位置工具类\n * 提供跨平台的逆地理编码功能\n */\n\n// 位置缓存\nlet locationCache = {\n  latitude: null,\n  longitude: null,\n  address: '',\n  timestamp: 0\n}\n\n// 缓存有效期（毫秒）- 1分钟\nconst CACHE_DURATION = 2 * 60 * 1000\n\n// 位置变化阈值（米）- 如果位置变化小于此值，使用缓存地址\nconst LOCATION_THRESHOLD = 100\n\n/**\n * 计算两点之间的距离（米）\n * @param {number} lat1 - 第一个点的纬度\n * @param {number} lng1 - 第一个点的经度\n * @param {number} lat2 - 第二个点的纬度\n * @param {number} lng2 - 第二个点的经度\n * @returns {number} 距离（米）\n */\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371000 // 地球半径（米）\n  const dLat = (lat2 - lat1) * Math.PI / 180\n  const dLng = (lng2 - lng1) * Math.PI / 180\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng / 2) * Math.sin(dLng / 2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n  return R * c\n}\n\n/**\n * 检查位置是否发生显著变化\n * @param {number} newLat - 新纬度\n * @param {number} newLng - 新经度\n * @returns {boolean} 是否发生显著变化\n */\nconst isLocationSignificantlyChanged = (newLat, newLng) => {\n  if (!locationCache.latitude || !locationCache.longitude) {\n    return true // 没有缓存，需要获取新地址\n  }\n  \n  const distance = calculateDistance(\n    locationCache.latitude, \n    locationCache.longitude, \n    newLat, \n    newLng\n  )\n  \n  return distance > LOCATION_THRESHOLD\n}\n\n/**\n * 检查缓存是否有效\n * @returns {boolean} 缓存是否有效\n */\nconst isCacheValid = () => {\n  if (!locationCache.timestamp) {\n    return false\n  }\n  \n  const now = Date.now()\n  return (now - locationCache.timestamp) < CACHE_DURATION\n}\n\n/**\n * 根据经纬度获取详细地址\n * @param {number} latitude - 纬度\n * @param {number} longitude - 经度\n * @param {boolean} forceRefresh - 是否强制刷新，忽略缓存\n * @returns {Promise<string>} 详细地址\n */\nexport function getAddressFromLocation(latitude, longitude, forceRefresh = false) {\n  return new Promise((resolve, reject) => {\n    if (!latitude || !longitude) {\n      reject(new Error('经纬度参数不能为空'))\n      return\n    }\n\n    // 检查是否需要调用API\n    const shouldCallAPI = forceRefresh || \n                         !isCacheValid() || \n                         isLocationSignificantlyChanged(latitude, longitude)\n\n    if (!shouldCallAPI && locationCache.address) {\n      console.log('使用缓存地址，位置变化不大:', locationCache.address)\n      resolve(locationCache.address)\n      return\n    }\n\n    console.log('调用腾讯地图API获取地址:', latitude, longitude)\n    \n    // 直接使用uni.request调用腾讯地图API\n    uni.request({\n      url: 'https://apis.map.qq.com/ws/geocoder/v1/',\n      method: 'GET',\n      data: {\n        key: '4Z3BZ-4JXCJ-EFNFY-DIL4V-6KKKH-YHF6Z',\n        location: `${latitude},${longitude}`,\n        output: 'json'\n      },\n      success: (res) => {\n        console.log('腾讯地图API响应:', res)\n        if (res.statusCode === 200 && res.data && res.data.status === 0 && res.data.result && res.data.result.address) {\n          // 更新缓存\n          locationCache = {\n            latitude: latitude,\n            longitude: longitude,\n            address: res.data.result.address,\n            timestamp: Date.now()\n          }\n          resolve(res.data.result.address)\n        } else {\n          // 如果获取详细地址失败，返回经纬度信息\n          const fallbackAddress = `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n          // 更新缓存\n          locationCache = {\n            latitude: latitude,\n            longitude: longitude,\n            address: fallbackAddress,\n            timestamp: Date.now()\n          }\n          resolve(fallbackAddress)\n        }\n      },\n      fail: (err) => {\n        console.error('腾讯地图API调用失败:', err)\n        // 返回经纬度信息作为备选\n        const fallbackAddress = `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n        // 更新缓存\n        locationCache = {\n          latitude: latitude,\n          longitude: longitude,\n          address: fallbackAddress,\n          timestamp: Date.now()\n        }\n        resolve(fallbackAddress)\n      }\n    })\n  })\n}\n\n/**\n * 获取当前位置的详细地址\n * @param {boolean} forceRefresh - 是否强制刷新，忽略缓存\n * @returns {Promise<Object>} 包含经纬度和地址的对象\n */\nexport function getCurrentLocationAddress(forceRefresh = false) {\n  return new Promise((resolve, reject) => {\n    uni.getLocation({\n      type: 'gcj02',\n      success: (res) => {\n        console.log('获取位置成功:', res)\n        const { latitude, longitude } = res\n        \n        // 检查是否需要调用地址API\n        const shouldCallAPI = forceRefresh || \n                             !isCacheValid() || \n                             isLocationSignificantlyChanged(latitude, longitude)\n\n        if (!shouldCallAPI && locationCache.address) {\n          console.log('使用缓存地址，位置变化不大')\n          resolve({\n            latitude,\n            longitude,\n            address: locationCache.address\n          })\n          return\n        }\n        \n        // 使用腾讯地图API获取详细地址\n        getAddressFromLocation(latitude, longitude, forceRefresh)\n          .then(address => {\n            resolve({\n              latitude,\n              longitude,\n              address\n            })\n          })\n          .catch(err => {\n            console.error('获取地址失败:', err)\n            // 即使获取地址失败，也返回位置信息\n            resolve({\n              latitude,\n              longitude,\n              address: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n            })\n          })\n      },\n      fail: (err) => {\n        console.error('获取位置失败:', err)\n        reject(new Error('获取位置失败: ' + (err.errMsg || err.message || '未知错误')))\n      }\n    })\n  })\n}\n\n/**\n * 清除位置缓存\n */\nexport function clearLocationCache() {\n  locationCache = {\n    latitude: null,\n    longitude: null,\n    address: '',\n    timestamp: 0\n  }\n  console.log('位置缓存已清除')\n}\n\n/**\n * 获取缓存状态信息\n * @returns {Object} 缓存状态\n */\nexport function getCacheStatus() {\n  return {\n    hasCache: !!locationCache.address,\n    isValid: isCacheValid(),\n    timestamp: locationCache.timestamp,\n    address: locationCache.address,\n    coordinates: {\n      latitude: locationCache.latitude,\n      longitude: locationCache.longitude\n    }\n  }\n}\n\n/**\n * 格式化距离显示\n * @param {number} distance - 距离（米）\n * @returns {string} 格式化后的距离\n */\nexport const formatDistance = (distance) => {\n  if (distance < 1000) {\n    return `${Math.round(distance)}米`\n  } else {\n    return `${(distance / 1000).toFixed(1)}公里`\n  }\n} "],"names":["uni"],"mappings":"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"}