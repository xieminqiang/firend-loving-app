{"version":3,"file":"address.js","sources":["utils/address.js"],"sourcesContent":["/**\n * 地址处理工具函数\n */\n\n/**\n * 处理地址字符串，确保符合后端验证规则\n * @param {string} address - 原始地址字符串\n * @param {number} maxLength - 最大长度限制，默认255\n * @returns {string} 处理后的地址字符串\n */\nexport function processAddress(address, maxLength = 255) {\n  if (!address || typeof address !== 'string') {\n    return ''\n  }\n  \n  // 移除首尾空格\n  let processedAddress = address.trim()\n  \n  // 移除不可见字符（控制字符）\n  processedAddress = processedAddress.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '')\n  \n  // 移除多余的空白字符\n  processedAddress = processedAddress.replace(/\\s+/g, ' ')\n  \n  // 如果长度超过限制，进行截断\n  if (processedAddress.length > maxLength) {\n    console.warn(`地址长度超过${maxLength}字符，进行截断处理`)\n    console.log('- 原始地址:', address)\n    console.log('- 原始长度:', address.length)\n    console.log('- 处理后地址:', processedAddress)\n    console.log('- 处理后长度:', processedAddress.length)\n    \n    processedAddress = processedAddress.substring(0, maxLength)\n    console.log('- 截断后地址:', processedAddress)\n    console.log('- 截断后长度:', processedAddress.length)\n  }\n  \n  return processedAddress\n}\n\n/**\n * 分析地址字符串的详细信息\n * @param {string} address - 地址字符串\n * @returns {object} 分析结果\n */\nexport function analyzeAddress(address) {\n  if (!address || typeof address !== 'string') {\n    return {\n      length: 0,\n      byteLength: 0,\n      hasHiddenChars: false,\n      charCodes: [],\n      processed: ''\n    }\n  }\n  \n  const processed = processAddress(address)\n  const byteLength = new TextEncoder().encode(processed).length\n  const hasHiddenChars = /[\\u0000-\\u001F\\u007F-\\u009F]/.test(address)\n  const charCodes = Array.from(processed).map(char => char.charCodeAt(0))\n  \n  return {\n    original: address,\n    originalLength: address.length,\n    length: processed.length,\n    byteLength,\n    hasHiddenChars,\n    charCodes,\n    processed\n  }\n}\n\n/**\n * 验证地址是否符合后端要求\n * @param {string} address - 地址字符串\n * @param {number} maxLength - 最大长度限制，默认255\n * @returns {object} 验证结果\n */\nexport function validateAddress(address, maxLength = 255) {\n  const analysis = analyzeAddress(address)\n  const isValid = analysis.length <= maxLength && !analysis.hasHiddenChars\n  \n  return {\n    isValid,\n    analysis,\n    error: isValid ? null : `地址长度超过${maxLength}字符或包含无效字符`\n  }\n} "],"names":["uni"],"mappings":";;AAUO,SAAS,eAAe,SAAS,YAAY,KAAK;AACvD,MAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,WAAO;AAAA,EACR;AAGD,MAAI,mBAAmB,QAAQ,KAAM;AAGrC,qBAAmB,iBAAiB,QAAQ,iCAAiC,EAAE;AAG/E,qBAAmB,iBAAiB,QAAQ,QAAQ,GAAG;AAGvD,MAAI,iBAAiB,SAAS,WAAW;AACvCA,kBAAA,MAAA,MAAA,QAAA,0BAAa,SAAS,SAAS,WAAW;AAC1CA,kBAAAA,MAAA,MAAA,OAAA,0BAAY,WAAW,OAAO;AAC9BA,kBAAA,MAAA,MAAA,OAAA,0BAAY,WAAW,QAAQ,MAAM;AACrCA,kBAAAA,MAAA,MAAA,OAAA,0BAAY,YAAY,gBAAgB;AACxCA,kBAAY,MAAA,MAAA,OAAA,0BAAA,YAAY,iBAAiB,MAAM;AAE/C,uBAAmB,iBAAiB,UAAU,GAAG,SAAS;AAC1DA,kBAAAA,MAAA,MAAA,OAAA,0BAAY,YAAY,gBAAgB;AACxCA,kBAAY,MAAA,MAAA,OAAA,0BAAA,YAAY,iBAAiB,MAAM;AAAA,EAChD;AAED,SAAO;AACT;AAOO,SAAS,eAAe,SAAS;AACtC,MAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,WAAW,CAAE;AAAA,MACb,WAAW;AAAA,IACZ;AAAA,EACF;AAED,QAAM,YAAY,eAAe,OAAO;AACxC,QAAM,aAAa,IAAI,YAAW,EAAG,OAAO,SAAS,EAAE;AACvD,QAAM,iBAAiB,+BAA+B,KAAK,OAAO;AAClE,QAAM,YAAY,MAAM,KAAK,SAAS,EAAE,IAAI,UAAQ,KAAK,WAAW,CAAC,CAAC;AAEtE,SAAO;AAAA,IACL,UAAU;AAAA,IACV,gBAAgB,QAAQ;AAAA,IACxB,QAAQ,UAAU;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACH;;;"}