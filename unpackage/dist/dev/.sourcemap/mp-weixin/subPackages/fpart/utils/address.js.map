{"version":3,"file":"address.js","sources":["subPackages/fpart/utils/address.js"],"sourcesContent":["/**\n * 地址处理工具函数\n */\n\n/**\n * 处理地址字符串，确保符合后端验证规则\n * @param {string} address - 原始地址字符串\n * @param {number} maxLength - 最大长度限制，默认255\n * @returns {string} 处理后的地址字符串\n */\nexport function processAddress(address, maxLength = 255) {\n  if (!address || typeof address !== 'string') {\n    return ''\n  }\n  \n  // 移除首尾空格\n  let processedAddress = address.trim()\n  \n  // 移除不可见字符（控制字符）\n  processedAddress = processedAddress.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '')\n  \n  // 移除多余的空白字符\n  processedAddress = processedAddress.replace(/\\s+/g, ' ')\n  \n  // 如果长度超过限制，进行截断\n  if (processedAddress.length > maxLength) {\n    console.warn(`地址长度超过${maxLength}字符，进行截断处理`)\n    console.log('- 原始地址:', address)\n    console.log('- 原始长度:', address.length)\n    console.log('- 处理后地址:', processedAddress)\n    console.log('- 处理后长度:', processedAddress.length)\n    \n    processedAddress = processedAddress.substring(0, maxLength)\n    console.log('- 截断后地址:', processedAddress)\n    console.log('- 截断后长度:', processedAddress.length)\n  }\n  \n  return processedAddress\n}\n\n/**\n * 分析地址字符串的详细信息\n * @param {string} address - 地址字符串\n * @returns {object} 分析结果\n */\nexport function analyzeAddress(address) {\n  if (!address || typeof address !== 'string') {\n    return {\n      length: 0,\n      byteLength: 0,\n      hasHiddenChars: false,\n      charCodes: [],\n      processed: ''\n    }\n  }\n  \n  const processed = processAddress(address)\n  // 使用简单的字节长度计算，兼容小程序环境\n  const byteLength = getByteLength(processed)\n  const hasHiddenChars = /[\\u0000-\\u001F\\u007F-\\u009F]/.test(address)\n  const charCodes = Array.from(processed).map(char => char.charCodeAt(0))\n  \n  return {\n    original: address,\n    originalLength: address.length,\n    length: processed.length,\n    byteLength,\n    hasHiddenChars,\n    charCodes,\n    processed\n  }\n}\n\n/**\n * 计算字符串的字节长度（兼容小程序环境）\n * @param {string} str - 字符串\n * @returns {number} 字节长度\n */\nfunction getByteLength(str) {\n  if (!str) return 0\n  \n  let length = 0\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i)\n    // 根据Unicode码点计算字节长度\n    if (code <= 0x7F) {\n      length += 1  // ASCII字符\n    } else if (code <= 0x7FF) {\n      length += 2  // 2字节字符\n    } else if (code <= 0xFFFF) {\n      length += 3  // 3字节字符\n    } else {\n      length += 4  // 4字节字符（如emoji）\n    }\n  }\n  return length\n}\n\n/**\n * 验证地址是否符合后端要求\n * @param {string} address - 地址字符串\n * @param {number} maxLength - 最大长度限制，默认255\n * @returns {object} 验证结果\n */\nexport function validateAddress(address, maxLength = 255) {\n  const analysis = analyzeAddress(address)\n  const isValid = analysis.length <= maxLength && !analysis.hasHiddenChars\n  \n  return {\n    isValid,\n    analysis,\n    error: isValid ? null : `地址长度超过${maxLength}字符或包含无效字符`\n  }\n} "],"names":["processAddress","address","maxLength","processedAddress","uni","analyzeAddress","processed","byteLength","getByteLength","hasHiddenChars","charCodes","char","str","length","i","code"],"mappings":"0DAUO,SAASA,EAAeC,EAASC,EAAY,IAAK,CACvD,GAAI,CAACD,GAAW,OAAOA,GAAY,SACjC,MAAO,GAIT,IAAIE,EAAmBF,EAAQ,KAAM,EAGrC,OAAAE,EAAmBA,EAAiB,QAAQ,gCAAiC,EAAE,EAG/EA,EAAmBA,EAAiB,QAAQ,OAAQ,GAAG,EAGnDA,EAAiB,OAASD,IAC5BE,EAAA,MAAA,MAAA,OAAA,2CAAa,SAASF,CAAS,WAAW,EAC1CE,EAAAA,MAAA,MAAA,MAAA,2CAAY,UAAWH,CAAO,EAC9BG,EAAA,MAAA,MAAA,MAAA,2CAAY,UAAWH,EAAQ,MAAM,EACrCG,EAAAA,MAAA,MAAA,MAAA,2CAAY,WAAYD,CAAgB,EACxCC,EAAY,MAAA,MAAA,MAAA,2CAAA,WAAYD,EAAiB,MAAM,EAE/CA,EAAmBA,EAAiB,UAAU,EAAGD,CAAS,EAC1DE,EAAAA,MAAA,MAAA,MAAA,2CAAY,WAAYD,CAAgB,EACxCC,EAAY,MAAA,MAAA,MAAA,2CAAA,WAAYD,EAAiB,MAAM,GAG1CA,CACT,CAOO,SAASE,EAAeJ,EAAS,CACtC,GAAI,CAACA,GAAW,OAAOA,GAAY,SACjC,MAAO,CACL,OAAQ,EACR,WAAY,EACZ,eAAgB,GAChB,UAAW,CAAE,EACb,UAAW,EACZ,EAGH,MAAMK,EAAYN,EAAeC,CAAO,EAElCM,EAAaC,EAAcF,CAAS,EACpCG,EAAiB,+BAA+B,KAAKR,CAAO,EAC5DS,EAAY,MAAM,KAAKJ,CAAS,EAAE,IAAIK,GAAQA,EAAK,WAAW,CAAC,CAAC,EAEtE,MAAO,CACL,SAAUV,EACV,eAAgBA,EAAQ,OACxB,OAAQK,EAAU,OAClB,WAAAC,EACA,eAAAE,EACA,UAAAC,EACA,UAAAJ,CACD,CACH,CAOA,SAASE,EAAcI,EAAK,CAC1B,GAAI,CAACA,EAAK,MAAO,GAEjB,IAAIC,EAAS,EACb,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAAK,CACnC,MAAMC,EAAOH,EAAI,WAAWE,CAAC,EAEzBC,GAAQ,IACVF,GAAU,EACDE,GAAQ,KACjBF,GAAU,EACDE,GAAQ,MACjBF,GAAU,EAEVA,GAAU,CAEb,CACD,OAAOA,CACT"}