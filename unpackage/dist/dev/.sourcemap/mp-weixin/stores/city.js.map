{"version":3,"file":"city.js","sources":["stores/city.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { getCityList } from '@/api/home.js'\n\nexport const useCityStore = defineStore('city', () => {\n  // 城市列表数据\n  const cityList = ref([])\n  const cityIndex = ref(0)\n  const userLocation = ref(null)\n  \n  // 计算当前选中的城市\n  const currentCity = computed(() => {\n    if (cityList.value.length > 0) {\n      return cityList.value[cityIndex.value]?.name || '选择区域'\n    }\n    return '选择区域'\n  })\n  \n  // 计算当前选中城市的代码\n  const currentCityCode = computed(() => {\n    if (cityList.value.length > 0) {\n      return cityList.value[cityIndex.value]?.code || null\n    }\n    return null\n  })\n  \n  // 计算两点之间的距离（使用Haversine公式）\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371 // 地球半径（公里）\n    const dLat = (lat2 - lat1) * Math.PI / 180\n    const dLon = (lon2 - lon1) * Math.PI / 180\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n    return R * c\n  }\n  \n  // 获取用户当前位置\n  const getUserLocation = () => {\n    return new Promise((resolve, reject) => {\n      uni.getLocation({\n        type: 'gcj02',\n        success: (res) => {\n          console.log('获取位置成功:', res)\n          userLocation.value = {\n            latitude: res.latitude,\n            longitude: res.longitude\n          }\n          resolve(res)\n        },\n        fail: (err) => {\n          console.log('获取位置失败:', err)\n          resolve(null)\n        }\n      })\n    })\n  }\n  \n  // 根据位置选择最近的城市\n  const selectNearestCity = () => {\n    if (!userLocation.value || cityList.value.length === 0) {\n      // 如果没有位置信息或城市列表为空，选择第一个城市\n      cityIndex.value = 0\n      return\n    }\n    \n    let nearestIndex = 0\n    let minDistance = Infinity\n    \n    cityList.value.forEach((city, index) => {\n      if (city.latitude && city.longitude) {\n        const distance = calculateDistance(\n          userLocation.value.latitude,\n          userLocation.value.longitude,\n          city.latitude,\n          city.longitude\n        )\n        \n        if (distance < minDistance) {\n          minDistance = distance\n          nearestIndex = index\n        }\n      }\n    })\n    \n    cityIndex.value = nearestIndex\n    console.log(`选择最近的城市: ${cityList.value[nearestIndex].name}, 距离: ${minDistance.toFixed(2)}km`)\n  }\n  \n  // 加载城市列表\n  const loadCityList = async () => {\n    try {\n      const response = await getCityList()\n      \n      if (response.data && response.data.code === 0 && response.data.data) {\n        // 转换API数据格式为组件需要的格式\n        cityList.value = response.data.data.map(city => ({\n          name: city.name,\n          code: city.city_code,\n          latitude: parseFloat(city.lat) || null,\n          longitude: parseFloat(city.lng) || null\n        }))\n        \n        console.log('原始城市数据:', response.data.data)\n        console.log('处理后的城市数据:', cityList.value)\n        \n        // 如果有城市数据，根据位置选择最近的城市\n        if (cityList.value.length > 0) {\n          selectNearestCity()\n        }\n        \n        console.log('城市列表加载成功:', cityList.value)\n      } else {\n        console.warn('获取城市列表失败，使用默认城市列表')\n        cityList.value = []\n      }\n    } catch (error) {\n      console.error('获取城市列表失败:', error)\n      cityList.value = []\n    }\n  }\n  \n  // 手动选择城市\n  const selectCity = async (index) => {\n    if (index >= 0 && index < cityList.value.length) {\n      cityIndex.value = index\n      console.log(`手动选择城市: ${cityList.value[index].name}`)\n    }\n  }\n  \n  // 根据城市名称选择城市\n  const selectCityByName = (cityName) => {\n    const index = cityList.value.findIndex(city => city.name === cityName)\n    if (index !== -1) {\n      cityIndex.value = index\n      console.log(`根据名称选择城市: ${cityName}`)\n    }\n  }\n  \n  // 初始化城市数据\n  const initCityData = async () => {\n    // 获取用户位置\n    await getUserLocation()\n    \n    // 加载城市列表\n    await loadCityList()\n  }\n  \n  return {\n    // 状态\n    cityList,\n    cityIndex,\n    userLocation,\n    \n    // 计算属性\n    currentCity,\n    currentCityCode,\n    \n    // 方法\n    calculateDistance,\n    getUserLocation,\n    selectNearestCity,\n    loadCityList,\n    selectCity,\n    selectCityByName,\n    initCityData\n  }\n}, {\n  persist: {\n    key: 'city-store',\n    storage: {\n      getItem(key) {\n        return uni.getStorageSync(key)\n      },\n      setItem(key, value) {\n        uni.setStorageSync(key, value)\n      }\n    }\n  }\n}) "],"names":["useCityStore","defineStore","cityList","ref","cityIndex","userLocation","currentCity","computed","_a","currentCityCode","calculateDistance","lat1","lon1","lat2","lon2","dLat","dLon","a","getUserLocation","resolve","reject","uni","res","err","selectNearestCity","nearestIndex","minDistance","city","index","distance","loadCityList","response","getCityList","error","cityName","key","value"],"mappings":"gFAIaA,EAAeC,EAAAA,YAAY,OAAQ,IAAM,CAEpD,MAAMC,EAAWC,EAAG,IAAC,EAAE,EACjBC,EAAYD,EAAG,IAAC,CAAC,EACjBE,EAAeF,EAAG,IAAC,IAAI,EAGvBG,EAAcC,EAAAA,SAAS,IAAM,OACjC,OAAIL,EAAS,MAAM,OAAS,KACnBM,EAAAN,EAAS,MAAME,EAAU,KAAK,IAA9B,YAAAI,EAAiC,OAAQ,MAGtD,CAAG,EAGKC,EAAkBF,EAAAA,SAAS,IAAM,OACrC,OAAIL,EAAS,MAAM,OAAS,KACnBM,EAAAN,EAAS,MAAME,EAAU,KAAK,IAA9B,YAAAI,EAAiC,OAAQ,IAGtD,CAAG,EAGKE,EAAoB,CAACC,EAAMC,EAAMC,EAAMC,IAAS,CAEpD,MAAMC,GAAQF,EAAOF,GAAQ,KAAK,GAAK,IACjCK,GAAQF,EAAOF,GAAQ,KAAK,GAAK,IACjCK,EAAI,KAAK,IAAIF,EAAK,CAAC,EAAI,KAAK,IAAIA,EAAK,CAAC,EAC1C,KAAK,IAAIJ,EAAO,KAAK,GAAK,GAAG,EAAI,KAAK,IAAIE,EAAO,KAAK,GAAK,GAAG,EAC9D,KAAK,IAAIG,EAAK,CAAC,EAAI,KAAK,IAAIA,EAAK,CAAC,EAEpC,MAAO,OADG,EAAI,KAAK,MAAM,KAAK,KAAKC,CAAC,EAAG,KAAK,KAAK,EAAEA,CAAC,CAAC,EAEtD,EAGKC,EAAkB,IACf,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,YAAY,CACd,KAAM,QACN,QAAUC,GAAQ,CAChBD,EAAAA,MAAA,MAAA,MAAA,uBAAY,UAAWC,CAAG,EAC1BjB,EAAa,MAAQ,CACnB,SAAUiB,EAAI,SACd,UAAWA,EAAI,SAChB,EACDH,EAAQG,CAAG,CACZ,EACD,KAAOC,GAAQ,CACbF,EAAAA,MAAA,MAAA,MAAA,uBAAY,UAAWE,CAAG,EAC1BJ,EAAQ,IAAI,CACb,CACT,CAAO,CACP,CAAK,EAIGK,EAAoB,IAAM,CAC9B,GAAI,CAACnB,EAAa,OAASH,EAAS,MAAM,SAAW,EAAG,CAEtDE,EAAU,MAAQ,EAClB,MACD,CAED,IAAIqB,EAAe,EACfC,EAAc,IAElBxB,EAAS,MAAM,QAAQ,CAACyB,EAAMC,IAAU,CACtC,GAAID,EAAK,UAAYA,EAAK,UAAW,CACnC,MAAME,EAAWnB,EACfL,EAAa,MAAM,SACnBA,EAAa,MAAM,UACnBsB,EAAK,SACLA,EAAK,SACN,EAEGE,EAAWH,IACbA,EAAcG,EACdJ,EAAeG,EAElB,CACP,CAAK,EAEDxB,EAAU,MAAQqB,EAClBJ,2CAAY,YAAYnB,EAAS,MAAMuB,CAAY,EAAE,IAAI,SAASC,EAAY,QAAQ,CAAC,CAAC,IAAI,CAC7F,EAGKI,EAAe,SAAY,CAC/B,GAAI,CACF,MAAMC,EAAW,MAAMC,cAAa,EAEhCD,EAAS,MAAQA,EAAS,KAAK,OAAS,GAAKA,EAAS,KAAK,MAE7D7B,EAAS,MAAQ6B,EAAS,KAAK,KAAK,IAAIJ,IAAS,CAC/C,KAAMA,EAAK,KACX,KAAMA,EAAK,UACX,SAAU,WAAWA,EAAK,GAAG,GAAK,KAClC,UAAW,WAAWA,EAAK,GAAG,GAAK,IAC7C,EAAU,EAEFN,EAAA,MAAA,MAAA,MAAA,wBAAY,UAAWU,EAAS,KAAK,IAAI,EACzCV,EAAY,MAAA,MAAA,MAAA,wBAAA,YAAanB,EAAS,KAAK,EAGnCA,EAAS,MAAM,OAAS,GAC1BsB,EAAmB,EAGrBH,EAAY,MAAA,MAAA,MAAA,wBAAA,YAAanB,EAAS,KAAK,IAEvCmB,EAAAA,MAAa,MAAA,OAAA,wBAAA,mBAAmB,EAChCnB,EAAS,MAAQ,CAAE,EAEtB,OAAQ+B,EAAO,CACdZ,EAAAA,4CAAc,YAAaY,CAAK,EAChC/B,EAAS,MAAQ,CAAE,CACpB,CACF,EA4BD,MAAO,CAEL,SAAAA,EACA,UAAAE,EACA,aAAAC,EAGA,YAAAC,EACA,gBAAAG,EAGA,kBAAAC,EACA,gBAAAQ,EACA,kBAAAM,EACA,aAAAM,EACA,WAxCiB,MAAOF,GAAU,CAC9BA,GAAS,GAAKA,EAAQ1B,EAAS,MAAM,SACvCE,EAAU,MAAQwB,EAClBP,EAAAA,MAAY,MAAA,MAAA,wBAAA,WAAWnB,EAAS,MAAM0B,CAAK,EAAE,IAAI,EAAE,EAEtD,EAoCC,iBAjCwBM,GAAa,CACrC,MAAMN,EAAQ1B,EAAS,MAAM,UAAUyB,GAAQA,EAAK,OAASO,CAAQ,EACjEN,IAAU,KACZxB,EAAU,MAAQwB,EAClBP,EAAA,MAAA,MAAA,MAAA,wBAAY,aAAaa,CAAQ,EAAE,EAEtC,EA4BC,aAzBmB,SAAY,CAE/B,MAAMhB,EAAiB,EAGvB,MAAMY,EAAc,CACrB,CAoBA,CACH,EAAG,CACD,QAAS,CACP,IAAK,aACL,QAAS,CACP,QAAQK,EAAK,CACX,OAAOd,EAAG,MAAC,eAAec,CAAG,CAC9B,EACD,QAAQA,EAAKC,EAAO,CAClBf,QAAI,eAAec,EAAKC,CAAK,CAC9B,CACF,CACF,CACH,CAAC"}