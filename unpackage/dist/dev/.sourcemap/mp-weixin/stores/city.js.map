{"version":3,"file":"city.js","sources":["stores/city.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { getCityList } from '@/api/home.js'\n\nexport const useCityStore = defineStore('city', () => {\n  // 城市列表数据\n  const cityList = ref([])\n  const cityIndex = ref(0)\n  const userLocation = ref(null)\n  \n  // 计算当前选中的城市\n  const currentCity = computed(() => {\n    if (cityList.value.length > 0) {\n      return cityList.value[cityIndex.value]?.name || '选择区域'\n    }\n    return '选择区域'\n  })\n  \n  // 计算当前选中城市的代码\n  const currentCityCode = computed(() => {\n    if (cityList.value.length > 0) {\n      return cityList.value[cityIndex.value]?.code || null\n    }\n    return null\n  })\n  \n  // 计算两点之间的距离（使用Haversine公式）\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371 // 地球半径（公里）\n    const dLat = (lat2 - lat1) * Math.PI / 180\n    const dLon = (lon2 - lon1) * Math.PI / 180\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n    return R * c\n  }\n  \n  // 获取用户当前位置\n  const getUserLocation = () => {\n    return new Promise((resolve, reject) => {\n      uni.getLocation({\n        type: 'gcj02',\n        success: (res) => {\n          console.log('获取位置成功:', res)\n          userLocation.value = {\n            latitude: res.latitude,\n            longitude: res.longitude\n          }\n          resolve(res)\n        },\n        fail: (err) => {\n          console.log('获取位置失败:', err)\n          resolve(null)\n        }\n      })\n    })\n  }\n  \n  // 根据位置选择最近的城市\n  const selectNearestCity = () => {\n    if (!userLocation.value || cityList.value.length === 0) {\n      // 如果没有位置信息或城市列表为空，选择第一个城市\n      cityIndex.value = 0\n      return\n    }\n    \n    let nearestIndex = 0\n    let minDistance = Infinity\n    \n    cityList.value.forEach((city, index) => {\n      if (city.latitude && city.longitude) {\n        const distance = calculateDistance(\n          userLocation.value.latitude,\n          userLocation.value.longitude,\n          city.latitude,\n          city.longitude\n        )\n        \n        if (distance < minDistance) {\n          minDistance = distance\n          nearestIndex = index\n        }\n      }\n    })\n    \n    cityIndex.value = nearestIndex\n    console.log(`选择最近的城市: ${cityList.value[nearestIndex].name}, 距离: ${minDistance.toFixed(2)}km`)\n  }\n  \n  // 加载城市列表\n  const loadCityList = async () => {\n    try {\n      const response = await getCityList()\n      \n      if (response.data && response.data.code === 0 && response.data.data) {\n        // 转换API数据格式为组件需要的格式\n        cityList.value = response.data.data.map(city => ({\n          name: city.name,\n          code: city.city_code,\n          latitude: parseFloat(city.lat) || null,\n          longitude: parseFloat(city.lng) || null\n        }))\n        \n        console.log('原始城市数据:', response.data.data)\n        console.log('处理后的城市数据:', cityList.value)\n        \n        // 如果有城市数据，根据位置选择最近的城市\n        if (cityList.value.length > 0) {\n          selectNearestCity()\n        }\n        \n        console.log('城市列表加载成功:', cityList.value)\n      } else {\n        console.warn('获取城市列表失败，使用默认城市列表')\n        cityList.value = []\n      }\n    } catch (error) {\n      console.error('获取城市列表失败:', error)\n      cityList.value = []\n    }\n  }\n  \n  // 手动选择城市\n  const selectCity = async (index) => {\n    if (index >= 0 && index < cityList.value.length) {\n      cityIndex.value = index\n      console.log(`手动选择城市: ${cityList.value[index].name}`)\n    }\n  }\n  \n  // 根据城市名称选择城市\n  const selectCityByName = (cityName) => {\n    const index = cityList.value.findIndex(city => city.name === cityName)\n    if (index !== -1) {\n      cityIndex.value = index\n      console.log(`根据名称选择城市: ${cityName}`)\n    }\n  }\n  \n  // 初始化城市数据\n  const initCityData = async () => {\n    // 获取用户位置\n    await getUserLocation()\n    \n    // 加载城市列表\n    await loadCityList()\n  }\n  \n  return {\n    // 状态\n    cityList,\n    cityIndex,\n    userLocation,\n    \n    // 计算属性\n    currentCity,\n    currentCityCode,\n    \n    // 方法\n    calculateDistance,\n    getUserLocation,\n    selectNearestCity,\n    loadCityList,\n    selectCity,\n    selectCityByName,\n    initCityData\n  }\n}, {\n  persist: {\n    key: 'city-store',\n    storage: {\n      getItem(key) {\n        return uni.getStorageSync(key)\n      },\n      setItem(key, value) {\n        uni.setStorageSync(key, value)\n      }\n    }\n  }\n}) "],"names":["defineStore","ref","computed","uni","getCityList"],"mappings":"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"}