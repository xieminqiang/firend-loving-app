{"version":3,"file":"level.js","sources":["stores/level.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { getServiceLevels } from '@/api/user.js'\n\n// 定义服务等级 Store\nexport const useLevelStore = defineStore('level', {\n  // 定义 state\n  state: () => ({\n    serviceLevels: [],\n    isLoading: false,\n    lastUpdateTime: null\n  }),\n  \n  // 定义 getters\n  getters: {\n    // 获取排序后的等级列表\n    sortedServiceLevels: (state) => {\n      return [...state.serviceLevels].sort((a, b) => a.level_order - b.level_order)\n    },\n    \n    // 检查是否需要更新数据（超过1小时）\n    needUpdate: (state) => {\n      if (!state.lastUpdateTime) return true\n      const now = Date.now()\n      const oneHour = 60 * 60 * 1000 // 1小时\n      return (now - state.lastUpdateTime) > oneHour\n    }\n  },\n  \n  // 定义 actions\n  actions: {\n    // 设置服务等级列表\n    setServiceLevels(levels) {\n      this.serviceLevels = levels\n      this.lastUpdateTime = Date.now()\n    },\n    \n    // 获取服务等级列表\n    async fetchServiceLevels() {\n      // 如果已有数据且不需要更新，直接返回\n      if (this.serviceLevels.length > 0 && !this.needUpdate) {\n        return this.serviceLevels\n      }\n      \n      this.isLoading = true\n      try {\n        const response = await getServiceLevels()\n        if (response.data && response.data.code === 0 && response.data.data) {\n          const levels = response.data.data || []\n          this.setServiceLevels(levels)\n          return levels\n        }\n        return []\n      } catch (error) {\n        console.error('获取服务等级列表失败:', error)\n        return []\n      } finally {\n        this.isLoading = false\n      }\n    },\n    \n    // 清除数据\n    clearServiceLevels() {\n      this.serviceLevels = []\n      this.lastUpdateTime = null\n    }\n  },\n  \n  // 持久化配置\n  persist: {\n    key: 'level-store',\n    paths: ['serviceLevels', 'lastUpdateTime']\n  }\n}) "],"names":["defineStore","getServiceLevels","uni"],"mappings":";;;AAIY,MAAC,gBAAgBA,cAAW,YAAC,SAAS;AAAA;AAAA,EAEhD,OAAO,OAAO;AAAA,IACZ,eAAe,CAAE;AAAA,IACjB,WAAW;AAAA,IACX,gBAAgB;AAAA,EACpB;AAAA;AAAA,EAGE,SAAS;AAAA;AAAA,IAEP,qBAAqB,CAAC,UAAU;AAC9B,aAAO,CAAC,GAAG,MAAM,aAAa,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,EAAE,WAAW;AAAA,IAC7E;AAAA;AAAA,IAGD,YAAY,CAAC,UAAU;AACrB,UAAI,CAAC,MAAM;AAAgB,eAAO;AAClC,YAAM,MAAM,KAAK,IAAK;AACtB,YAAM,UAAU,KAAK,KAAK;AAC1B,aAAQ,MAAM,MAAM,iBAAkB;AAAA,IACvC;AAAA,EACF;AAAA;AAAA,EAGD,SAAS;AAAA;AAAA,IAEP,iBAAiB,QAAQ;AACvB,WAAK,gBAAgB;AACrB,WAAK,iBAAiB,KAAK,IAAK;AAAA,IACjC;AAAA;AAAA,IAGD,MAAM,qBAAqB;AAEzB,UAAI,KAAK,cAAc,SAAS,KAAK,CAAC,KAAK,YAAY;AACrD,eAAO,KAAK;AAAA,MACb;AAED,WAAK,YAAY;AACjB,UAAI;AACF,cAAM,WAAW,MAAMC,0BAAkB;AACzC,YAAI,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,MAAM;AACnE,gBAAM,SAAS,SAAS,KAAK,QAAQ,CAAE;AACvC,eAAK,iBAAiB,MAAM;AAC5B,iBAAO;AAAA,QACR;AACD,eAAO,CAAE;AAAA,MACV,SAAQ,OAAO;AACdC,sBAAAA,MAAA,MAAA,SAAA,yBAAc,eAAe,KAAK;AAClC,eAAO,CAAE;AAAA,MACjB,UAAgB;AACR,aAAK,YAAY;AAAA,MAClB;AAAA,IACF;AAAA;AAAA,IAGD,qBAAqB;AACnB,WAAK,gBAAgB,CAAE;AACvB,WAAK,iBAAiB;AAAA,IACvB;AAAA,EACF;AAAA;AAAA,EAGD,SAAS;AAAA,IACP,KAAK;AAAA,IACL,OAAO,CAAC,iBAAiB,gBAAgB;AAAA,EAC1C;AACH,CAAC;;"}