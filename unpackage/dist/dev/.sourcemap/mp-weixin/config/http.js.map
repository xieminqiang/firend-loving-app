{"version":3,"file":"http.js","sources":["config/http.js"],"sourcesContent":["/**\n * 添加拦截器:\n *   拦截 request 请求\n *   拦截 uploadFile 文件上传\n *\n * TODO:\n *   1. 非 http 开头需拼接地址\n *   2. 请求超时\n *   3. 添加小程序端请求头标识\n *   4. 添加 token 请求头标识\n */\n\nimport { useUserStore } from '@/stores/user.js'\nimport config from '@/config/config.js';\n // const baseURL = 'http://192.168.1.11:8883/v1'\n\nconst baseURL =  process.env.NODE_ENV === 'development' ? config.development.baseUrl : config.production.baseUrl;\n// https://api.aipointer.com/rest/v1\n //const baseURL = 'https://gxj.aipointer.com/gxj/v1';\n// 添加拦截器e\nconst httpInterceptor = {\n  // 拦截前触发\n  invoke(options) {\n    // 1. 非 http 开头需拼接地址\n    if (!options.url.startsWith('http')) {\n      options.url = baseURL + options.url\n    }\n    // 2. 请求超时, 默认 60s\n    options.timeout = 600000\n    // 3. 添加小程序端请求头标识\n    options.header = {\n      ...options.header,\n      'source-client': 'miniapp',\n    }\n    // 4. 添加 token 请求头标识\n    const userStore = useUserStore()\n    const token = userStore.userInfo?.access_token || userStore?.token\n    if (token) {\n      options.header.Authorization = 'Bearer ' + token\n    }\n  },\n}\n\nuni.addInterceptor('request', httpInterceptor)\nuni.addInterceptor('uploadFile', httpInterceptor)\n\n/**\n * 请求函数\n * @param  UniApp.RequestOptions\n * @returns Promise\n *  1. 返回 Promise 对象\n *  2. 获取数据成功\n *    2.1 提取核心数据 res.data\n *    2.2 添加类型，支持泛型\n *  3. 获取数据失败\n *    3.1 401错误  -> 清理用户信息，跳转到登录页\n *    3.2 其他错误 -> 根据后端错误信息轻提示\n *    3.3 网络错误 -> 提示用户换网络\n */\n\n// 2.2 添加类型，支持泛型\nexport const http = (options) => {\n  // 1. 返回 Promise 对象\n  return new Promise((resolve, reject) => {\n    uni.request({\n      ...options,\n      // 响应成功\n      success(res) {\n        // 状态码 2xx， axios 就是这样设计的\n\t\t\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          // 2.1 提取核心数据 res.data\n\t\t     console.log(\"222\")\n          \n          // 检查业务错误码\n          if (res.data && res.data.code !== undefined && res.data.code !== 0) {\n            // 业务错误，显示错误信息并reject\n            // uni.showToast({\n            //   icon: 'none',\n            //   title: res.data.msg || '请求失败',\n            // })\n            reject(res)\n            return\n          }\n\t\t\n          resolve(res)\n\t\t   \n        } else if (res.statusCode === 401) {\n          // 401错误  -> 清理用户信息，跳转到登录页\n          // const userStore = useUserStore()\n          // userStore.clearUserInfo()\n          // //跳转到我的页面\n          // uni.switchTab({\n          //   url: '/pages/my/index'\n          // })\n\t\t\n          // 提示用户登录\n          uni.showToast({\n            icon: 'none',\n            title: '请先登录',\n          })\n          reject(res)\n        } else {\n          // 其他错误 -> 根据后端错误信息轻提示\n          uni.showToast({\n            icon: 'none',\n            title: (res.data).msg || '请求错误',\n          })\n          reject(res)\n        }\n      },\n      // 响应失败\n      fail(err) {\n        uni.showToast({\n          icon: 'none',\n          title: '网络错误，换个网络试试',\n        })\n        reject(err)\n      },\n    })\n  })\n}\nexport const httpWx = (options) => {\n  // 1. 返回 Promise 对象\n  return new Promise((resolve, reject) => {\n    uni.request({\n      ...options,\n      // 响应成功\n      success(res) {\n        // 状态码 2xx， axios 就是这样设计的\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          // 2.1 提取核心数据 res.data\n          \n          // 检查业务错误码\n          if (res.data && res.data.code !== undefined && res.data.code !== 0) {\n            // 业务错误，显示错误信息并reject\n            uni.showToast({\n              icon: 'none',\n              title: res.data.msg || '请求失败',\n            })\n            reject(res)\n            return\n          }\n          \n          resolve(res)\n        } else if (res.statusCode === 401) {\n         \n        } else {\n          // 其他错误 -> 根据后端错误信息轻提示\n          uni.showToast({\n            icon: 'none',\n            title: (res.data).msg || '请求错误',\n          })\n          reject(res)\n        }\n      },\n      // 响应失败\n      fail(err) {\n        uni.showToast({\n          icon: 'none',\n          title: '网络错误，换个网络试试',\n        })\n        reject(err)\n      },\n    })\n  })\n}\n"],"names":["baseURL","config","httpInterceptor","options","userStore","useUserStore","token","_a","uni","http","resolve","reject","res","err"],"mappings":"4GAgBMA,EAAoDC,EAAA,OAAO,YAAY,QAIvEC,EAAkB,CAEtB,OAAOC,EAAS,OAETA,EAAQ,IAAI,WAAW,MAAM,IACxBA,EAAA,IAAMH,EAAUG,EAAQ,KAGlCA,EAAQ,QAAU,IAElBA,EAAQ,OAAS,CACf,GAAGA,EAAQ,OACX,gBAAiB,SAAA,EAGnB,MAAMC,EAAYC,EAAAA,eACZC,IAAQC,EAAAH,EAAU,WAAV,YAAAG,EAAoB,gBAAgBH,GAAA,YAAAA,EAAW,OACzDE,IACMH,EAAA,OAAO,cAAgB,UAAYG,EAE/C,CACF,EAEAE,EAAAA,MAAI,eAAe,UAAWN,CAAe,EAC7CM,EAAAA,MAAI,eAAe,aAAcN,CAAe,EAiBnC,MAAAO,EAAQN,GAEZ,IAAI,QAAQ,CAACO,EAASC,IAAW,CACtCH,EAAAA,MAAI,QAAQ,CACV,GAAGL,EAEH,QAAQS,EAAK,CAGX,GAAIA,EAAI,YAAc,KAAOA,EAAI,WAAa,IAAK,CAK7C,GAHKJ,EAAAA,MAAA,MAAA,MAAA,uBAAA,KAAK,EAGVI,EAAI,MAAQA,EAAI,KAAK,OAAS,QAAaA,EAAI,KAAK,OAAS,EAAG,CAMlED,EAAOC,CAAG,EACV,MACF,CAEAF,EAAQE,CAAG,CAAA,MAEFA,EAAI,aAAe,KAU5BJ,EAAAA,MAAI,UAAU,CACZ,KAAM,OACN,MAAO,MAAA,CACR,EACDG,EAAOC,CAAG,IAGVJ,EAAAA,MAAI,UAAU,CACZ,KAAM,OACN,MAAQI,EAAI,KAAM,KAAO,MAAA,CAC1B,EACDD,EAAOC,CAAG,EAEd,EAEA,KAAKC,EAAK,CACRL,EAAAA,MAAI,UAAU,CACZ,KAAM,OACN,MAAO,aAAA,CACR,EACDG,EAAOE,CAAG,CACZ,CAAA,CACD,CAAA,CACF"}